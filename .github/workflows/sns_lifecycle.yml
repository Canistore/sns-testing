name: "SNS lifecycle"

on:
  push:
     branches: [ master ]
  pull_request:

jobs:
  sns_lifecycle:
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Build docker image
      run: |
        docker build -t dfinity/sns-testing .
    - name: Start docker image
      run: |
        SNS_TESTING_INSTANCE=$(
          docker run -p 8080:8080 -v "`pwd`":/dapp -d dfinity/sns-testing dfx start --clean
        )
        while ! docker logs $SNS_TESTING_INSTANCE 2>&1 | grep -m 1 'Dashboard:'
        do
          echo "Awaiting local replica ..."
          sleep 3
        done
    - name: Set up docker image
      run: |
        SNS_TESTING_INSTANCE=$(docker ps -q)
        docker exec $SNS_TESTING_INSTANCE bash setup_locally.sh
    - name: Run basic scenario
      run: |
        SNS_TESTING_INSTANCE=$(docker ps -q)
        docker exec $SNS_TESTING_INSTANCE bash run_basic_scenario.sh
    - name: NNS frontend dapp smoke test
      run: |
        curl http://qsgjb-riaaa-aaaaa-aaaga-cai.localhost:8080/launchpad/ | gzip -d | grep "<title>Network Nervous System frontend dapp</title>"
    - name: Stop docker container
      run: |
        SNS_TESTING_INSTANCE=$(docker ps -q)
        docker kill $SNS_TESTING_INSTANCE

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: sns_lifecycle
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: dfinity/sns-testing
    - name: Build and push Docker image
      uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
